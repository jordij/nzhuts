# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-07-24 21:21
from __future__ import unicode_literals

import django.contrib.postgres.fields
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('wagtailcore', '0039_collectionviewrestriction'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=200)),
                ('asset_id', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator('^\\d{1,9}$')])),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='AlertMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(null=True)),
                ('heading', models.CharField(blank=True, max_length=400)),
                ('detail', models.TextField(blank=True, max_length=3000)),
                ('alert', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alert_message', to='core.Alert')),
            ],
        ),
        migrations.CreateModel(
            name='CampsiteIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'verbose_name': 'All Campsite Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='CampsitePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('asset_id', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator('^\\d{1,9}$')])),
                ('name', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(blank=True, max_length=400, null=True)),
                ('raw_facilities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('intro', models.TextField(blank=True, max_length=3000, null=True)),
                ('intro_thumbnail', models.URLField(blank=True, null=True)),
                ('link_url', models.URLField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=200, null=True)),
                ('place', models.CharField(blank=True, max_length=400, null=True)),
                ('x', models.IntegerField(null=True)),
                ('y', models.IntegerField(null=True)),
                ('dogs_allowed', models.NullBooleanField()),
                ('is_free', models.NullBooleanField()),
                ('raw_landscape', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('powered_sites', models.PositiveIntegerField(blank=True)),
                ('unpowered_sites', models.PositiveIntegerField(blank=True)),
                ('raw_activities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
            ],
            options={
                'verbose_name': 'Campsite Page',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='CampsitePageActivity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CampsitePageFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CampsitePageLandscape',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'verbose_name': 'NZ Huts Home',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HutIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
            ],
            options={
                'verbose_name': 'All Hut Pages',
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HutPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('asset_id', models.CharField(max_length=9, unique=True, validators=[django.core.validators.RegexValidator('^\\d{1,9}$')])),
                ('name', models.CharField(blank=True, max_length=200)),
                ('location', models.CharField(blank=True, max_length=400, null=True)),
                ('raw_facilities', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None)),
                ('intro', models.TextField(blank=True, max_length=3000, null=True)),
                ('intro_thumbnail', models.URLField(blank=True, null=True)),
                ('link_url', models.URLField(blank=True, null=True)),
                ('region', models.CharField(blank=True, max_length=200, null=True)),
                ('place', models.CharField(blank=True, max_length=400, null=True)),
                ('x', models.IntegerField(null=True)),
                ('y', models.IntegerField(null=True)),
                ('bunks', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(blank=True, choices=[('Standard', 'Standard'), ('Basic/bivvies', 'Basic/Bivvies'), ('Basic Hut/bivvy', 'Basic/Bivvies'), ('Serviced', 'Serviced'), ('Serviced Hut', 'Serviced'), ('Great Walks', 'Great Walks'), ('Great Walk', 'Great Walks'), ('Scenic', 'Scenic'), ('Serviced Alpine', 'Serviced Alpine'), ('Building- Industrial', 'Building-Industrial'), ('Building - Industrial', 'Building-Industrial'), ('Building -Industrial', 'Building-Industrial')], max_length=200, null=True)),
                ('proximity', models.CharField(blank=True, max_length=200, null=True)),
                ('bookable', models.NullBooleanField()),
                ('status', models.CharField(choices=[('OPEN', 'OPEN'), ('CLOSED', 'CLOSED')], max_length=200, null=True)),
            ],
            options={
                'verbose_name': 'Hut Page',
            },
            bases=('wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='HutPageFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='hut_facilities', to='core.HutPage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_hutpagefacility_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='hutpage',
            name='facilities',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.HutPageFacility', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='campsitepagelandscape',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='campsite_landscapes', to='core.HutPage'),
        ),
        migrations.AddField(
            model_name='campsitepagelandscape',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_campsitepagelandscape_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='campsitepagefacility',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='campsite_facilities', to='core.HutPage'),
        ),
        migrations.AddField(
            model_name='campsitepagefacility',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_campsitepagefacility_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='campsitepageactivity',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='campsite_activities', to='core.HutPage'),
        ),
        migrations.AddField(
            model_name='campsitepageactivity',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_campsitepageactivity_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='campsitepage',
            name='activities',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.CampsitePageActivity', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='campsitepage',
            name='facilities',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.CampsitePageFacility', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='campsitepage',
            name='landscapes',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='core.CampsitePageLandscape', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
